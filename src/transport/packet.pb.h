// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: transport/packet.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2fpacket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_transport_2fpacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "FEC/fec_type.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transport_2fpacket_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2fpacket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transport_2fpacket_2eproto;
class DataPacket;
struct DataPacketDefaultTypeInternal;
extern DataPacketDefaultTypeInternal _DataPacket_default_instance_;
class FeedbackPacket;
struct FeedbackPacketDefaultTypeInternal;
extern FeedbackPacketDefaultTypeInternal _FeedbackPacket_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class ProbePacket;
struct ProbePacketDefaultTypeInternal;
extern ProbePacketDefaultTypeInternal _ProbePacket_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum PacketType : int {
  DataPacketId = 0,
  FeedbackPacketId = 1,
  ProbeRequestPacketId = 2,
  ProbeResponsePacketId = 3,
  SessionRequestPacketId = 4,
  SessionResponsePacketId = 5,
  SessionStartPacketId = 6,
  PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PacketType_IsValid(int value);
extern const uint32_t PacketType_internal_data_[];
constexpr PacketType PacketType_MIN = static_cast<PacketType>(0);
constexpr PacketType PacketType_MAX = static_cast<PacketType>(6);
constexpr int PacketType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
PacketType_descriptor();
template <typename T>
const std::string& PacketType_Name(T value) {
  static_assert(std::is_same<T, PacketType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PacketType_Name().");
  return PacketType_Name(static_cast<PacketType>(value));
}
template <>
inline const std::string& PacketType_Name(PacketType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PacketType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool PacketType_Parse(absl::string_view name, PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketType>(
      PacketType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ProbePacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ProbePacket) */ {
 public:
  inline ProbePacket() : ProbePacket(nullptr) {}
  ~ProbePacket() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProbePacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProbePacket(const ProbePacket& from) : ProbePacket(nullptr, from) {}
  inline ProbePacket(ProbePacket&& from) noexcept
      : ProbePacket(nullptr, std::move(from)) {}
  inline ProbePacket& operator=(const ProbePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbePacket& operator=(ProbePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProbePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProbePacket* internal_default_instance() {
    return reinterpret_cast<const ProbePacket*>(
        &_ProbePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ProbePacket& a, ProbePacket& b) { a.Swap(&b); }
  inline void Swap(ProbePacket* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbePacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProbePacket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ProbePacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProbePacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ProbePacket& from) { ProbePacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProbePacket* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ProbePacket"; }

 protected:
  explicit ProbePacket(::google::protobuf::Arena* arena);
  ProbePacket(::google::protobuf::Arena* arena, const ProbePacket& from);
  ProbePacket(::google::protobuf::Arena* arena, ProbePacket&& from) noexcept
      : ProbePacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSeqNumFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // uint64 seq_num = 1;
  void clear_seq_num() ;
  ::uint64_t seq_num() const;
  void set_seq_num(::uint64_t value);

  private:
  ::uint64_t _internal_seq_num() const;
  void _internal_set_seq_num(::uint64_t value);

  public:
  // bool request = 2;
  void clear_request() ;
  bool request() const;
  void set_request(bool value);

  private:
  bool _internal_request() const;
  void _internal_set_request(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ProbePacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ProbePacket_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ProbePacket& from_msg);
    ::uint64_t seq_num_;
    bool request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2fpacket_2eproto;
};
// -------------------------------------------------------------------

class FeedbackPacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:FeedbackPacket) */ {
 public:
  inline FeedbackPacket() : FeedbackPacket(nullptr) {}
  ~FeedbackPacket() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FeedbackPacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline FeedbackPacket(const FeedbackPacket& from) : FeedbackPacket(nullptr, from) {}
  inline FeedbackPacket(FeedbackPacket&& from) noexcept
      : FeedbackPacket(nullptr, std::move(from)) {}
  inline FeedbackPacket& operator=(const FeedbackPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedbackPacket& operator=(FeedbackPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedbackPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedbackPacket* internal_default_instance() {
    return reinterpret_cast<const FeedbackPacket*>(
        &_FeedbackPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FeedbackPacket& a, FeedbackPacket& b) { a.Swap(&b); }
  inline void Swap(FeedbackPacket* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedbackPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedbackPacket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FeedbackPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeedbackPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FeedbackPacket& from) { FeedbackPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FeedbackPacket* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "FeedbackPacket"; }

 protected:
  explicit FeedbackPacket(::google::protobuf::Arena* arena);
  FeedbackPacket(::google::protobuf::Arena* arena, const FeedbackPacket& from);
  FeedbackPacket(::google::protobuf::Arena* arena, FeedbackPacket&& from) noexcept
      : FeedbackPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNackFieldNumber = 3,
    kLossrateFieldNumber = 1,
    kRttFieldNumber = 2,
  };
  // repeated uint64 nack = 3;
  int nack_size() const;
  private:
  int _internal_nack_size() const;

  public:
  void clear_nack() ;
  ::uint64_t nack(int index) const;
  void set_nack(int index, ::uint64_t value);
  void add_nack(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& nack() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_nack();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_nack() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_nack();

  public:
  // double lossrate = 1;
  void clear_lossrate() ;
  double lossrate() const;
  void set_lossrate(double value);

  private:
  double _internal_lossrate() const;
  void _internal_set_lossrate(double value);

  public:
  // uint32 rtt = 2;
  void clear_rtt() ;
  ::uint32_t rtt() const;
  void set_rtt(::uint32_t value);

  private:
  ::uint32_t _internal_rtt() const;
  void _internal_set_rtt(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:FeedbackPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_FeedbackPacket_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FeedbackPacket& from_msg);
    ::google::protobuf::RepeatedField<::uint64_t> nack_;
    mutable ::google::protobuf::internal::CachedSize _nack_cached_byte_size_;
    double lossrate_;
    ::uint32_t rtt_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2fpacket_2eproto;
};
// -------------------------------------------------------------------

class DataPacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DataPacket) */ {
 public:
  inline DataPacket() : DataPacket(nullptr) {}
  ~DataPacket() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataPacket(const DataPacket& from) : DataPacket(nullptr, from) {}
  inline DataPacket(DataPacket&& from) noexcept
      : DataPacket(nullptr, std::move(from)) {}
  inline DataPacket& operator=(const DataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPacket& operator=(DataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPacket* internal_default_instance() {
    return reinterpret_cast<const DataPacket*>(
        &_DataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DataPacket& a, DataPacket& b) { a.Swap(&b); }
  inline void Swap(DataPacket* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPacket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DataPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataPacket& from) { DataPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataPacket* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DataPacket"; }

 protected:
  explicit DataPacket(::google::protobuf::Arena* arena);
  DataPacket(::google::protobuf::Arena* arena, const DataPacket& from);
  DataPacket(::google::protobuf::Arena* arena, DataPacket&& from) noexcept
      : DataPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 2,
    kLenFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 len = 1;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:DataPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DataPacket_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataPacket& from_msg);
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t len_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2fpacket_2eproto;
};
// -------------------------------------------------------------------

class Packet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Packet(
      ::google::protobuf::internal::ConstantInitialized);

  inline Packet(const Packet& from) : Packet(nullptr, from) {}
  inline Packet(Packet&& from) noexcept
      : Packet(nullptr, std::move(from)) {}
  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum SubPacketCase {
    kDataPacket = 5,
    kFeedbackPacket = 6,
    kProbePacket = 7,
    SUBPACKET_NOT_SET = 0,
  };
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
        &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Packet& a, Packet& b) { a.Swap(&b); }
  inline void Swap(Packet* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Packet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Packet& from) { Packet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Packet* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Packet"; }

 protected:
  explicit Packet(::google::protobuf::Arena* arena);
  Packet(::google::protobuf::Arena* arena, const Packet& from);
  Packet(::google::protobuf::Arena* arena, Packet&& from) noexcept
      : Packet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSeqNumFieldNumber = 1,
    kPacketTypeFieldNumber = 2,
    kFecTypeFieldNumber = 3,
    kFecIndexFieldNumber = 4,
    kDataPacketFieldNumber = 5,
    kFeedbackPacketFieldNumber = 6,
    kProbePacketFieldNumber = 7,
  };
  // uint64 seq_num = 1;
  void clear_seq_num() ;
  ::uint64_t seq_num() const;
  void set_seq_num(::uint64_t value);

  private:
  ::uint64_t _internal_seq_num() const;
  void _internal_set_seq_num(::uint64_t value);

  public:
  // .PacketType packet_type = 2;
  void clear_packet_type() ;
  ::PacketType packet_type() const;
  void set_packet_type(::PacketType value);

  private:
  ::PacketType _internal_packet_type() const;
  void _internal_set_packet_type(::PacketType value);

  public:
  // .FecType fec_type = 3;
  void clear_fec_type() ;
  ::FecType fec_type() const;
  void set_fec_type(::FecType value);

  private:
  ::FecType _internal_fec_type() const;
  void _internal_set_fec_type(::FecType value);

  public:
  // uint32 fec_index = 4;
  void clear_fec_index() ;
  ::uint32_t fec_index() const;
  void set_fec_index(::uint32_t value);

  private:
  ::uint32_t _internal_fec_index() const;
  void _internal_set_fec_index(::uint32_t value);

  public:
  // .DataPacket data_packet = 5;
  bool has_data_packet() const;
  private:
  bool _internal_has_data_packet() const;

  public:
  void clear_data_packet() ;
  const ::DataPacket& data_packet() const;
  PROTOBUF_NODISCARD ::DataPacket* release_data_packet();
  ::DataPacket* mutable_data_packet();
  void set_allocated_data_packet(::DataPacket* value);
  void unsafe_arena_set_allocated_data_packet(::DataPacket* value);
  ::DataPacket* unsafe_arena_release_data_packet();

  private:
  const ::DataPacket& _internal_data_packet() const;
  ::DataPacket* _internal_mutable_data_packet();

  public:
  // .FeedbackPacket feedback_packet = 6;
  bool has_feedback_packet() const;
  private:
  bool _internal_has_feedback_packet() const;

  public:
  void clear_feedback_packet() ;
  const ::FeedbackPacket& feedback_packet() const;
  PROTOBUF_NODISCARD ::FeedbackPacket* release_feedback_packet();
  ::FeedbackPacket* mutable_feedback_packet();
  void set_allocated_feedback_packet(::FeedbackPacket* value);
  void unsafe_arena_set_allocated_feedback_packet(::FeedbackPacket* value);
  ::FeedbackPacket* unsafe_arena_release_feedback_packet();

  private:
  const ::FeedbackPacket& _internal_feedback_packet() const;
  ::FeedbackPacket* _internal_mutable_feedback_packet();

  public:
  // .ProbePacket probe_packet = 7;
  bool has_probe_packet() const;
  private:
  bool _internal_has_probe_packet() const;

  public:
  void clear_probe_packet() ;
  const ::ProbePacket& probe_packet() const;
  PROTOBUF_NODISCARD ::ProbePacket* release_probe_packet();
  ::ProbePacket* mutable_probe_packet();
  void set_allocated_probe_packet(::ProbePacket* value);
  void unsafe_arena_set_allocated_probe_packet(::ProbePacket* value);
  ::ProbePacket* unsafe_arena_release_probe_packet();

  private:
  const ::ProbePacket& _internal_probe_packet() const;
  ::ProbePacket* _internal_mutable_probe_packet();

  public:
  void clear_SubPacket();
  SubPacketCase SubPacket_case() const;
  // @@protoc_insertion_point(class_scope:Packet)
 private:
  class _Internal;
  void set_has_data_packet();
  void set_has_feedback_packet();
  void set_has_probe_packet();
  inline bool has_SubPacket() const;
  inline void clear_has_SubPacket();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 7, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Packet_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Packet& from_msg);
    ::uint64_t seq_num_;
    int packet_type_;
    int fec_type_;
    ::uint32_t fec_index_;
    union SubPacketUnion {
      constexpr SubPacketUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::DataPacket* data_packet_;
      ::FeedbackPacket* feedback_packet_;
      ::ProbePacket* probe_packet_;
    } SubPacket_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_2fpacket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DataPacket

// uint32 len = 1;
inline void DataPacket::clear_len() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.len_ = 0u;
}
inline ::uint32_t DataPacket::len() const {
  // @@protoc_insertion_point(field_get:DataPacket.len)
  return _internal_len();
}
inline void DataPacket::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:DataPacket.len)
}
inline ::uint32_t DataPacket::_internal_len() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.len_;
}
inline void DataPacket::_internal_set_len(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.len_ = value;
}

// bytes data = 2;
inline void DataPacket::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& DataPacket::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DataPacket.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPacket::set_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DataPacket.data)
}
inline std::string* DataPacket::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:DataPacket.data)
  return _s;
}
inline const std::string& DataPacket::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void DataPacket::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Set(value, GetArena());
}
inline std::string* DataPacket::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* DataPacket::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DataPacket.data)
  return _impl_.data_.Release();
}
inline void DataPacket::set_allocated_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DataPacket.data)
}

// -------------------------------------------------------------------

// FeedbackPacket

// double lossrate = 1;
inline void FeedbackPacket::clear_lossrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lossrate_ = 0;
}
inline double FeedbackPacket::lossrate() const {
  // @@protoc_insertion_point(field_get:FeedbackPacket.lossrate)
  return _internal_lossrate();
}
inline void FeedbackPacket::set_lossrate(double value) {
  _internal_set_lossrate(value);
  // @@protoc_insertion_point(field_set:FeedbackPacket.lossrate)
}
inline double FeedbackPacket::_internal_lossrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lossrate_;
}
inline void FeedbackPacket::_internal_set_lossrate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lossrate_ = value;
}

// uint32 rtt = 2;
inline void FeedbackPacket::clear_rtt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_ = 0u;
}
inline ::uint32_t FeedbackPacket::rtt() const {
  // @@protoc_insertion_point(field_get:FeedbackPacket.rtt)
  return _internal_rtt();
}
inline void FeedbackPacket::set_rtt(::uint32_t value) {
  _internal_set_rtt(value);
  // @@protoc_insertion_point(field_set:FeedbackPacket.rtt)
}
inline ::uint32_t FeedbackPacket::_internal_rtt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtt_;
}
inline void FeedbackPacket::_internal_set_rtt(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_ = value;
}

// repeated uint64 nack = 3;
inline int FeedbackPacket::_internal_nack_size() const {
  return _internal_nack().size();
}
inline int FeedbackPacket::nack_size() const {
  return _internal_nack_size();
}
inline void FeedbackPacket::clear_nack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_.Clear();
}
inline ::uint64_t FeedbackPacket::nack(int index) const {
  // @@protoc_insertion_point(field_get:FeedbackPacket.nack)
  return _internal_nack().Get(index);
}
inline void FeedbackPacket::set_nack(int index, ::uint64_t value) {
  _internal_mutable_nack()->Set(index, value);
  // @@protoc_insertion_point(field_set:FeedbackPacket.nack)
}
inline void FeedbackPacket::add_nack(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_nack()->Add(value);
  // @@protoc_insertion_point(field_add:FeedbackPacket.nack)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& FeedbackPacket::nack() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:FeedbackPacket.nack)
  return _internal_nack();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* FeedbackPacket::mutable_nack()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:FeedbackPacket.nack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_nack();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
FeedbackPacket::_internal_nack() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nack_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* FeedbackPacket::_internal_mutable_nack() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.nack_;
}

// -------------------------------------------------------------------

// ProbePacket

// uint64 seq_num = 1;
inline void ProbePacket::clear_seq_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_num_ = ::uint64_t{0u};
}
inline ::uint64_t ProbePacket::seq_num() const {
  // @@protoc_insertion_point(field_get:ProbePacket.seq_num)
  return _internal_seq_num();
}
inline void ProbePacket::set_seq_num(::uint64_t value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:ProbePacket.seq_num)
}
inline ::uint64_t ProbePacket::_internal_seq_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seq_num_;
}
inline void ProbePacket::_internal_set_seq_num(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_num_ = value;
}

// bool request = 2;
inline void ProbePacket::clear_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_ = false;
}
inline bool ProbePacket::request() const {
  // @@protoc_insertion_point(field_get:ProbePacket.request)
  return _internal_request();
}
inline void ProbePacket::set_request(bool value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:ProbePacket.request)
}
inline bool ProbePacket::_internal_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_;
}
inline void ProbePacket::_internal_set_request(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_ = value;
}

// -------------------------------------------------------------------

// Packet

// uint64 seq_num = 1;
inline void Packet::clear_seq_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_num_ = ::uint64_t{0u};
}
inline ::uint64_t Packet::seq_num() const {
  // @@protoc_insertion_point(field_get:Packet.seq_num)
  return _internal_seq_num();
}
inline void Packet::set_seq_num(::uint64_t value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:Packet.seq_num)
}
inline ::uint64_t Packet::_internal_seq_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seq_num_;
}
inline void Packet::_internal_set_seq_num(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seq_num_ = value;
}

// .PacketType packet_type = 2;
inline void Packet::clear_packet_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_type_ = 0;
}
inline ::PacketType Packet::packet_type() const {
  // @@protoc_insertion_point(field_get:Packet.packet_type)
  return _internal_packet_type();
}
inline void Packet::set_packet_type(::PacketType value) {
  _internal_set_packet_type(value);
  // @@protoc_insertion_point(field_set:Packet.packet_type)
}
inline ::PacketType Packet::_internal_packet_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::PacketType>(_impl_.packet_type_);
}
inline void Packet::_internal_set_packet_type(::PacketType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_type_ = value;
}

// .FecType fec_type = 3;
inline void Packet::clear_fec_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fec_type_ = 0;
}
inline ::FecType Packet::fec_type() const {
  // @@protoc_insertion_point(field_get:Packet.fec_type)
  return _internal_fec_type();
}
inline void Packet::set_fec_type(::FecType value) {
  _internal_set_fec_type(value);
  // @@protoc_insertion_point(field_set:Packet.fec_type)
}
inline ::FecType Packet::_internal_fec_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::FecType>(_impl_.fec_type_);
}
inline void Packet::_internal_set_fec_type(::FecType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fec_type_ = value;
}

// uint32 fec_index = 4;
inline void Packet::clear_fec_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fec_index_ = 0u;
}
inline ::uint32_t Packet::fec_index() const {
  // @@protoc_insertion_point(field_get:Packet.fec_index)
  return _internal_fec_index();
}
inline void Packet::set_fec_index(::uint32_t value) {
  _internal_set_fec_index(value);
  // @@protoc_insertion_point(field_set:Packet.fec_index)
}
inline ::uint32_t Packet::_internal_fec_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fec_index_;
}
inline void Packet::_internal_set_fec_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fec_index_ = value;
}

// .DataPacket data_packet = 5;
inline bool Packet::has_data_packet() const {
  return SubPacket_case() == kDataPacket;
}
inline bool Packet::_internal_has_data_packet() const {
  return SubPacket_case() == kDataPacket;
}
inline void Packet::set_has_data_packet() {
  _impl_._oneof_case_[0] = kDataPacket;
}
inline void Packet::clear_data_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (SubPacket_case() == kDataPacket) {
    if (GetArena() == nullptr) {
      delete _impl_.SubPacket_.data_packet_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.SubPacket_.data_packet_);
    }
    clear_has_SubPacket();
  }
}
inline ::DataPacket* Packet::release_data_packet() {
  // @@protoc_insertion_point(field_release:Packet.data_packet)
  if (SubPacket_case() == kDataPacket) {
    clear_has_SubPacket();
    auto* temp = _impl_.SubPacket_.data_packet_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubPacket_.data_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataPacket& Packet::_internal_data_packet() const {
  return SubPacket_case() == kDataPacket ? *_impl_.SubPacket_.data_packet_ : reinterpret_cast<::DataPacket&>(::_DataPacket_default_instance_);
}
inline const ::DataPacket& Packet::data_packet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.data_packet)
  return _internal_data_packet();
}
inline ::DataPacket* Packet::unsafe_arena_release_data_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.data_packet)
  if (SubPacket_case() == kDataPacket) {
    clear_has_SubPacket();
    auto* temp = _impl_.SubPacket_.data_packet_;
    _impl_.SubPacket_.data_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_data_packet(::DataPacket* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_SubPacket();
  if (value) {
    set_has_data_packet();
    _impl_.SubPacket_.data_packet_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.data_packet)
}
inline ::DataPacket* Packet::_internal_mutable_data_packet() {
  if (SubPacket_case() != kDataPacket) {
    clear_SubPacket();
    set_has_data_packet();
    _impl_.SubPacket_.data_packet_ =
        ::google::protobuf::Message::DefaultConstruct<::DataPacket>(GetArena());
  }
  return _impl_.SubPacket_.data_packet_;
}
inline ::DataPacket* Packet::mutable_data_packet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::DataPacket* _msg = _internal_mutable_data_packet();
  // @@protoc_insertion_point(field_mutable:Packet.data_packet)
  return _msg;
}

// .FeedbackPacket feedback_packet = 6;
inline bool Packet::has_feedback_packet() const {
  return SubPacket_case() == kFeedbackPacket;
}
inline bool Packet::_internal_has_feedback_packet() const {
  return SubPacket_case() == kFeedbackPacket;
}
inline void Packet::set_has_feedback_packet() {
  _impl_._oneof_case_[0] = kFeedbackPacket;
}
inline void Packet::clear_feedback_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (SubPacket_case() == kFeedbackPacket) {
    if (GetArena() == nullptr) {
      delete _impl_.SubPacket_.feedback_packet_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.SubPacket_.feedback_packet_);
    }
    clear_has_SubPacket();
  }
}
inline ::FeedbackPacket* Packet::release_feedback_packet() {
  // @@protoc_insertion_point(field_release:Packet.feedback_packet)
  if (SubPacket_case() == kFeedbackPacket) {
    clear_has_SubPacket();
    auto* temp = _impl_.SubPacket_.feedback_packet_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubPacket_.feedback_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FeedbackPacket& Packet::_internal_feedback_packet() const {
  return SubPacket_case() == kFeedbackPacket ? *_impl_.SubPacket_.feedback_packet_ : reinterpret_cast<::FeedbackPacket&>(::_FeedbackPacket_default_instance_);
}
inline const ::FeedbackPacket& Packet::feedback_packet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.feedback_packet)
  return _internal_feedback_packet();
}
inline ::FeedbackPacket* Packet::unsafe_arena_release_feedback_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.feedback_packet)
  if (SubPacket_case() == kFeedbackPacket) {
    clear_has_SubPacket();
    auto* temp = _impl_.SubPacket_.feedback_packet_;
    _impl_.SubPacket_.feedback_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_feedback_packet(::FeedbackPacket* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_SubPacket();
  if (value) {
    set_has_feedback_packet();
    _impl_.SubPacket_.feedback_packet_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.feedback_packet)
}
inline ::FeedbackPacket* Packet::_internal_mutable_feedback_packet() {
  if (SubPacket_case() != kFeedbackPacket) {
    clear_SubPacket();
    set_has_feedback_packet();
    _impl_.SubPacket_.feedback_packet_ =
        ::google::protobuf::Message::DefaultConstruct<::FeedbackPacket>(GetArena());
  }
  return _impl_.SubPacket_.feedback_packet_;
}
inline ::FeedbackPacket* Packet::mutable_feedback_packet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::FeedbackPacket* _msg = _internal_mutable_feedback_packet();
  // @@protoc_insertion_point(field_mutable:Packet.feedback_packet)
  return _msg;
}

// .ProbePacket probe_packet = 7;
inline bool Packet::has_probe_packet() const {
  return SubPacket_case() == kProbePacket;
}
inline bool Packet::_internal_has_probe_packet() const {
  return SubPacket_case() == kProbePacket;
}
inline void Packet::set_has_probe_packet() {
  _impl_._oneof_case_[0] = kProbePacket;
}
inline void Packet::clear_probe_packet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (SubPacket_case() == kProbePacket) {
    if (GetArena() == nullptr) {
      delete _impl_.SubPacket_.probe_packet_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.SubPacket_.probe_packet_);
    }
    clear_has_SubPacket();
  }
}
inline ::ProbePacket* Packet::release_probe_packet() {
  // @@protoc_insertion_point(field_release:Packet.probe_packet)
  if (SubPacket_case() == kProbePacket) {
    clear_has_SubPacket();
    auto* temp = _impl_.SubPacket_.probe_packet_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SubPacket_.probe_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ProbePacket& Packet::_internal_probe_packet() const {
  return SubPacket_case() == kProbePacket ? *_impl_.SubPacket_.probe_packet_ : reinterpret_cast<::ProbePacket&>(::_ProbePacket_default_instance_);
}
inline const ::ProbePacket& Packet::probe_packet() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Packet.probe_packet)
  return _internal_probe_packet();
}
inline ::ProbePacket* Packet::unsafe_arena_release_probe_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.probe_packet)
  if (SubPacket_case() == kProbePacket) {
    clear_has_SubPacket();
    auto* temp = _impl_.SubPacket_.probe_packet_;
    _impl_.SubPacket_.probe_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_probe_packet(::ProbePacket* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_SubPacket();
  if (value) {
    set_has_probe_packet();
    _impl_.SubPacket_.probe_packet_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.probe_packet)
}
inline ::ProbePacket* Packet::_internal_mutable_probe_packet() {
  if (SubPacket_case() != kProbePacket) {
    clear_SubPacket();
    set_has_probe_packet();
    _impl_.SubPacket_.probe_packet_ =
        ::google::protobuf::Message::DefaultConstruct<::ProbePacket>(GetArena());
  }
  return _impl_.SubPacket_.probe_packet_;
}
inline ::ProbePacket* Packet::mutable_probe_packet() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ProbePacket* _msg = _internal_mutable_probe_packet();
  // @@protoc_insertion_point(field_mutable:Packet.probe_packet)
  return _msg;
}

inline bool Packet::has_SubPacket() const {
  return SubPacket_case() != SUBPACKET_NOT_SET;
}
inline void Packet::clear_has_SubPacket() {
  _impl_._oneof_case_[0] = SUBPACKET_NOT_SET;
}
inline Packet::SubPacketCase Packet::SubPacket_case() const {
  return Packet::SubPacketCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::PacketType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PacketType>() {
  return ::PacketType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_transport_2fpacket_2eproto_2epb_2eh
